* Test heading top-level

This file is for testing helm-org-rifle.

#+BEGIN_SRC elisp
(helm-org-rifle-get-candidates "pomegr blueberry")
(helm-org-rifle-get-candidates "top-level")
#+END_SRC

** Heading A: blueberry

Keywords: pomegranate boisenberry

** Heading B: pomegranate boisenberry

** Heading C: pomegranate

** Heading D: boisenberry

** Heading E

pomegranate

** Heading F green

boisenberry

** Heading G
red orange yellow green blue indigo violet
black black black black blue black black

*** Heading G.1

green beans and blueberry

** Heading H: Helm 

What is it with all this food?

*** Heading H.1

Emacs

** Heading I: emacs

helm :)

* Test code for eval'ing

These come in handy while coding.

** Profiling

#+BEGIN_SRC elisp
(defmacro it (&rest body)
  `(lambda (it)
     ,@body))
#+END_SRC

#+BEGIN_SRC elisp
  (defmacro profile-rifle (&rest body)
    `(let (output)
       (dolist (p '("helm-" "org-" "string-" "s-"))
         (elp-instrument-package p))
       ,@body
       (elp-results)
       (elp-restore-all)
       (point-min)
       (forward-line 20)
       (delete-region (point) (point-max))
       (setq output (buffer-substring-no-properties (point-min) (point-max)))
       (kill-buffer)
       (delete-window)
       output))
#+END_SRC

** Open Helm session on current org buffers

#+BEGIN_SRC elisp
(let ((helm-candidate-separator " "))
  (helm :sources (helm-org-rifle-get-sources)))

(let ((helm-candidate-separator " ")
      (helm-org-rifle-show-path t))
  (helm :sources (helm-org-rifle-get-sources)))
#+END_SRC

*** Without fontification

#+BEGIN_SRC elisp
(let ((helm-candidate-separator " ")
      (helm-org-rifle-fontify-headings nil))
  (helm :sources (helm-org-rifle-get-sources)))

(let ((helm-candidate-separator " ")
      (helm-org-rifle-show-path t)
      (helm-org-rifle-fontify-headings nil))
  (helm :sources (helm-org-rifle-get-sources)))
#+END_SRC

** Get list of candidates for "test.org" buffer

#+BEGIN_SRC elisp
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "pomegr blueberry")
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "green")
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "green blue")
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "pomegr")

(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "helm food")

(let ((helm-candidate-separator " ")
      (helm-org-rifle-show-path t))
  (helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "green blue"))
#+END_SRC

*** Other buffers

#+BEGIN_SRC elisp
(let ((helm-org-rifle-fontify-headings nil))
  (helm-org-rifle-get-candidates-in-buffer (get-buffer "reference.org") "emacs"))

(helm-org-rifle-get-candidates-in-buffer (get-buffer "reference.org") "emacs")
(helm-org-rifle-get-candidates-in-buffer (get-buffer "main.org") "emacs")

(helm-org-rifle-get-candidates-in-buffer (get-buffer "main.org") "tires")

#+END_SRC

** Context-splitting

Prototype code, keeping for future reference.

#+BEGIN_SRC elisp
(let* ((num-context-words 2)
       (needle "needle")
       (haystack "one two three needle four five six")
       (hay (s-split needle haystack))
       (left-hay (s-split-words (car hay)))
       (right-hay (s-split-words (nth 1 hay))))
  (concat "..."
          (s-join " " (subseq left-hay (- num-context-words)))
          " " needle " "
          (s-join " " (subseq right-hay 0 num-context-words))
          "..."))

;; Multiple needles
(let* ( (needles '("needle" "pin"))
        (haystack "one two three \" needle not pin four five six seven eight pin nine ten eleven twelve"))
  (cl-loop for needle in needles
           append (cl-loop for re = (rx-to-string `(and (repeat 1 ,helm-org-rifle-context-words (and (1+ (not space))
                                                                                                     (or (1+ space)
                                                                                                         word-boundary)))
                                                        (group (eval needle))
                                                        (repeat 1 ,helm-org-rifle-context-words (and (or word-boundary
                                                                                                         (1+ space))
                                                                                                     (1+ (not space))))))
                           for m = (string-match re haystack end)
                           for end = (match-end 1)
                           while m
                           collect (concat "..." (match-string-no-properties 0 haystack) "..."))))
#+END_SRC

*** Slow code that splits on word boundaries

This code splits on word boundaries, but it's very slow.  Profiling it
showed the vast majority of the time was in =string-match=.  I'm
guessing the regexp is too complicated or unoptimized.

#+BEGIN_SRC elisp
  ;; Reduce matching lines to matched word with context
  (setq matched-words-with-context
        (cl-loop for line in (map 'list 'car matching-lines-in-node)
                 append (cl-loop for token in input
                                 for re = (rx-to-string
                                           `(and (repeat 0 ,helm-org-rifle-context-words
                                                         (and (1+ (not space))
                                                              (or (1+ space)
                                                                  word-boundary)))
                                                 (group (eval token))
                                                 (repeat 0 ,helm-org-rifle-context-words
                                                         (and (or word-boundary
                                                                  (1+ space))
                                                              (1+ (not space))))))
  
                                 ;;  This one line uses about 95% of the runtime of this function
                                 for m = (string-match re line end)
  
                                 for end = (match-end 1)
                                 when m
                                 collect (match-string-no-properties 0 line))))
#+END_SRC

*** Faster version that cuts off mid-word

This version is much, much faster, but instead of matching on word
boundaries, it just matches so-many characters before and after the
token.  It's not quite as nice, but the speedup is worth it, and it
seems good enough.

This is the version currently in-use.

#+BEGIN_SRC elisp
(setq matched-words-with-context
                    (cl-loop for line in (map 'list 'car matching-lines-in-node)
                             append (cl-loop for token in input
                                             for re = (rx-to-string '(and (repeat 0 25 not-newline)
                                                                          (eval token)
                                                                          (repeat 0 25 not-newline)))
                                             for m = (string-match re line end)

                                             for end = (match-end 1)
                                             when m
                                             collect (match-string-no-properties 0 line))))
#+END_SRC

** Org headings

#+BEGIN_SRC elisp
  ;; Build string for fontifying
  (components (org-heading-components))
  (level (nth 0 components))
  (plain-heading (s-join " " (list
                              (s-pad-left level  "*" "")
                              (nth 4 components))))
  ;; Note: org-fontify-like-in-org-mode uses temporary buffers that load
  ;; org-mode and therefore org-mode-hook.  This could be a performance
  ;; issue.
  (fontified-heading (org-fontify-like-in-org-mode plain-heading))
#+END_SRC

** MAYBE elp profiling

#+BEGIN_SRC elisp
(setq helm-org-rifle-show-path nil)
(setq helm-org-rifle-show-path t)
#+END_SRC

*** Testing with helm
#+BEGIN_SRC elisp
(setq argh-how-many-buffers 0)
(message "This many buffers: %s" argh-how-many-buffers)
(setq argh-how-many-times-getc-called 0)
(message "This many times: %s" argh-how-many-times-getc-called)
#+END_SRC

#+BEGIN_SRC elisp :results value
  (progn
    (dolist (p '("helm-" "org-" "string-" "s-"))
      (elp-instrument-package p))
    (let ((helm-pattern "emacs helm"))
      (helm-org-rifle))
    (elp-results)
    (elp-restore-all)
    (buffer-substring-no-properties (point-min) (point-max)))
#+END_SRC

#+RESULTS:
#+begin_example
helm-org-rifle                                                1           21.149816496  21.149816496
helm-internal                                                 1           21.146028492  21.146028492
helm-display-buffer                                           1           0.015992741   0.015992741
helm-default-display-buffer                                   1           0.015959396   0.015959396
helm-split-window-default-fn                                  2           0.015504805   0.0077524025
helm-window-in-direction                                      2           0.015404318   0.007702159
helm-cleanup                                                  1           0.005956688   0.005956688
helm-frame-or-window-configuration                            2           0.00564105    0.002820525
helm-org-rifle-get-sources                                    1           0.003752977   0.003752977
string-match                                                  3553        0.0031005809  8.726...e-07
helm-make-source                                              3           0.001922106   0.000640702
org-buffer-list                                               1           0.001704984   0.001704984
helm--setup-source                                            3           0.0013488509  0.000449617
helm-source--header-line                                      3           0.0011306280  0.0003768760
helm-initialize                                               1           0.000588538   0.000588538
helm-initial-setup                                            1           0.000510501   0.000510501
helm--create-source                                           3           0.000273995   9.133...e-05
helm-source-sync                                              3           0.000238082   7.936...e-05
helm-log-run-hook                                             12          0.0002350079  1.958...e-05
helm--run-init-hooks                                          2           0.000163177   8.15885e-05
helm-get-sources                                              5           0.000135961   2.71922e-05
helm-create-helm-buffer                                       1           0.000131969   0.000131969
helm-funcall-foreach                                          2           0.000125873   6.29365e-05
helm-compile-sources                                          1           8.7179e-05    8.7179e-05
helm-buffer-get                                               5           5.823e-05     1.1646e-05
helm-handle-winner-boring-buffers                             1           5.4042e-05    5.4042e-05
helm-action-window                                            10          5.110...e-05  5.1105e-06
helm-clean-up-minibuffer                                      1           5.0868e-05    5.0868e-05
helm--remap-mouse-mode                                        2           4.403e-05     2.2015e-05
helm-ff-save-history                                          1           4.3852e-05    4.3852e-05
helm-org-rifle-buffer-invisible-p                             5           4.0771e-05    8.1542e-06
helm-file-completion-source-p                                 1           3.9612e-05    3.9612e-05
helm-source-mm-get-search-or-match-fns                        3           3.739e-05     1.246...e-05
helm-get-current-source                                       1           3.4542e-05    3.4542e-05
helm-update-source-p                                          3           2.9221e-05    9.740...e-06
helm-prevent-switching-other-window                           2           2.8107e-05    1.40535e-05
s-starts-with?                                                5           2.5263e-05    5.0526e-06
helm-log                                                      61          2.303...e-05  3.776...e-07
helm--current-buffer                                          1           2.0959e-05    2.0959e-05
helm-clear-visible-mark                                       1           2.0575e-05    2.0575e-05
helm-window                                                   1           1.5778e-05    1.5778e-05
helm-compile-source--info-index                               3           1.536...e-05  5.121...e-06
helm-parse-keys                                               1           1.4924e-05    1.4924e-05
helm-restore-position-on-quit                                 1           1.3328e-05    1.3328e-05
helm-current-position                                         2           1.279...e-05  6.397...e-06
helm-attrset                                                  3           1.2792e-05    4.264e-06
helm-initialize-overlays                                      1           1.0226e-05    1.0226e-05
helm-setup-user-source                                        3           1.019...e-05  3.397...e-06
helm-match-line-cleanup                                       1           9.55e-06      9.55e-06
helm-alive-p                                                  1           6.474e-06     6.474e-06
helm-compile-source--type                                     3           5.868...e-06  1.956...e-06
helm-compile-source--candidates-file                          3           5.813e-06     1.937...e-06
helm-match-functions                                          3           5.695...e-06  1.898...e-06
helm-search-functions                                         3           5.488...e-06  1.829...e-06
helm-delayed-source-p                                         3           4.737...e-06  1.579...e-06
helm-make-actions                                             3           3.953e-06     1.317...e-06
string-prefix-p                                               5           3.477...e-06  6.954e-07
string-width                                                  5           2.828...e-06  5.657...e-07
helm-kill-async-processes                                     2           2.012e-06     1.006e-06
helm-interpret-value                                          3           1.797e-06     5.99e-07
helm-compile-source--candidates-in-buffer                     3           1.788e-06     5.96e-07
helm-mklist                                                   3           1.764...e-06  5.88e-07
helm-compile-source--dummy                                    3           1.683e-06     5.61e-07
helm-resume-p                                                 3           1.42e-06      4.733...e-07
helm-recent-push                                              1           1.399e-06     1.399e-06
helm-get-attribute-from-source-type                           3           1.371e-06     4.570...e-07
helm-set-local-variable                                       1           1.261e-06     1.261e-06
helm-normalize-sources                                        2           1.235e-06     6.175e-07
helm-initialize-persistent-action                             1           1.192e-06     1.192e-06
helm-reset-yank-point                                         2           1.177e-06     5.885e-07
helm-get-previous-header-pos                                  1           9.7e-07       9.7e-07
helm-log-save-maybe                                           1           9.02e-07      9.02e-07
helm-find-files--reset-level-tree                             1           7.84e-07      7.84e-07
helm-get-next-header-pos                                      1           7e-07         7e-07
string-equal                                                  1           2.75e-07      2.75e-07
helm-read-pattern-maybe                                       1           0             0.0
helm-other-buffer                                             1           0             0.0
helm-update                                                   1           0             0.0
helm-keyboard-quit                                            1           0             0.0
#+end_example

**** Results

***** DONE helm-org-rifle-get-sources 

This function is working correctly, returning the number of sources that it should.

***** DONE helm-org-rifle-get-candidates-in-buffer

This function works correctly and pretty quickly.

***** TODO helm-org-rifle-get-candidates-in-buffer called 10 times for each buffer

However, Helm seems to be calling this function, the =:candidates= function...sometimes 10 times per buffer, sometimes less, like this time where it did it 6 times for each buffer (input was "emacs"):

#+BEGIN_EXAMPLE txt
Evaluate this elisp code block on your system? (y or n) y
executing Elisp code block...
This many sources: 18
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
ARGH called for buffer: test.org
ARGH called for buffer: README.org\helm-org-rifle
ARGH called for buffer: inbox.org
ARGH called for buffer: README.org\org-bookmark-heading
ARGH called for buffer: main.org
ARGH called for buffer: school.org
ARGH called for buffer: sparky.org
ARGH called for buffer: prayers.org
ARGH called for buffer: calendar.org
ARGH called for buffer: log.org
ARGH called for buffer: people.org
ARGH called for buffer: bible.org
ARGH called for buffer: books.org
ARGH called for buffer: misc.org
ARGH called for buffer: posts.org
ARGH called for buffer: quotes.org
ARGH called for buffer: reference.org
ARGH called for buffer: research.org
Code block evaluation complete.
#+END_EXAMPLE

Okay, I think I see what it's doing: Helm is calling the candidates function once for every character that is typed, plus one more time.  When I type =emacs= it calls it 6 times per buffer, and when I type =e= it calls it twice per buffer.  The =:delay= works in that it doesn't start getting candidates until that much time has elapsed after I've finished typing, but then it goes ahead and calls it for every character I typed, plus one.

Problem might be in =helm-update= or =helm-process-delayed-sources=...

*** Testing without helm
#+BEGIN_SRC elisp :results value
    (progn
      (let ((buffers (remove-if 'helm-org-rifle-buffer-invisible-p (org-buffer-list nil t)))
            (string "emacs helm";; (read-from-minibuffer "Words: ")
                    ))
        (dolist (p '("helm-" "org-" "string-" "s-"))
          (elp-instrument-package p))
        (dolist (buffer buffers)
          (helm-org-rifle-get-candidates-in-buffer buffer string)))
      (elp-results)
      (elp-restore-all)
  (buffer-substring-no-properties (point-min) (point-max)))
#+END_SRC

#+RESULTS:
#+begin_example txt
helm-org-rifle-get-candidates-in-buffer                       18          0.325021298   0.0180567387
string-match                                                  1347        0.0362915149  2.694...e-05
org-heading-components                                        376         0.0335699080  8.928...e-05
org-back-to-heading                                           412         0.018007849   4.370...e-05
s-contains?                                                   1114        0.0121319489  1.089...e-05
helm-org-rifle-fontify-like-in-org-mode                       18          0.01178797    0.0006548872
org-indent-refresh-maybe                                      36          0.0028632780  7.953...e-05
org-at-heading-p                                              706         0.0020766779  2.941...e-06
org-indent-add-properties                                     36          0.0017027310  4.729...e-05
org-get-limited-outline-regexp                                72          0.0010015760  1.391...e-05
org-activate-plain-links                                      23          0.0004599949  1.999...e-05
s--truthy?                                                    1114        0.0003860220  3.465...e-07
org-indent-notify-modified-headline                           36          0.0003555730  9.877...e-06
org-activate-bracket-links                                    18          0.0003234190  1.796...e-05
org-do-latex-and-related                                      18          0.000282822   1.571...e-05
org-activate-footnote-links                                   18          0.0002406200  1.336...e-05
org-reduced-level                                             376         0.0002319499  6.168...e-07
org-fontify-meta-lines-and-blocks                             18          0.0002315430  1.286...e-05
org-string-nw-p                                               18          0.000225051   1.250...e-05
org-unfontify-region                                          18          0.000187095   1.039...e-05
org-footnote-next-reference-or-definition                     18          0.0001767840  9.821...e-06
s-join                                                        54          0.0001765719  3.269...e-06
org-in-src-block-p                                            10          0.0001672479  1.672...e-05
org-activate-tags                                             18          0.000155625   8.645...e-06
org-fontify-meta-lines-and-blocks-1                           18          0.0001549140  8.606...e-06
org-string-match-p                                            18          0.0001511729  8.398...e-06
org-do-emphasis-faces                                         18          0.000141394   7.855...e-06
org-activate-dates                                            18          0.000104557   5.808...e-06
s-pad-left                                                    18          0.0001032720  5.737...e-06
org-activate-angle-links                                      18          9.853...e-05  5.474...e-06
string-match-p                                                18          9.2952e-05    5.164e-06
org-bullets-level-char                                        18          8.3399e-05    4.633...e-06
org-activate-code                                             18          5.2719e-05    2.928...e-06
org-get-level-face                                            54          5.143...e-05  9.524...e-07
org-link-unescape                                             5           5.1e-05       1.02e-05
org-remove-flyspell-overlays-in                               10          4.6203e-05    4.6203e-06
org-font-lock-add-priority-faces                              18          3.870...e-05  2.150...e-06
org-remove-font-lock-display-properties                       18          3.099...e-05  1.721...e-06
org-hide-wide-columns                                         18          2.987e-05     1.659...e-06
org-before-change-function                                    36          2.4329e-05    6.758...e-07
string-to-char                                                36          1.481...e-05  4.114...e-07
org-font-lock-hook                                            18          1.462...e-05  8.127...e-07
org-activate-target-links                                     18          1.361...e-05  7.564...e-07
org-fontify-entities                                          18          1.223...e-05  6.799...e-07
org-font-lock-add-tag-faces                                   18          9.402...e-06  5.223...e-07
org-raise-scripts                                             18          7.807e-06     4.337...e-07
#+end_example

** DONE buffer-name-matching

#+BEGIN_SRC elisp
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/inbox.org") "test.org emacs")
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "test.org") "inbox.org emacs")
#+END_SRC

** DONE Matching symbol parts

#+BEGIN_SRC elisp
;; This should return the "Target heading" heading too
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "test.org") "face")

(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "~/org/inbox.org") "face helm")
(helm-org-rifle-get-candidates-in-buffer (find-buffer-visiting "testtemp.org") "face helm")
#+END_SRC

This does not work:

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "face"))
    (string-match (concat "\\_<" token "\\_>") target))
#+END_SRC

#+RESULTS:

Which is strange, because =\\_<= is supposed to be the symbol-boundary character...

This works but isn't what we want:

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "face"))
    (string-match token target))
#+END_SRC

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "face"))
    (string-match (concat "\\b" token "\\b") target))
#+END_SRC

This may do it:

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "face"))
    (string-match (concat "\\W" token "\\W") target))
#+END_SRC

It matches =face= okay, but not =helm= because of the quote.

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "helm"))
    (string-match (concat "\\(\\W\\|\\_<\\)" token "\\(\\W\\|\\_>\\)") target))
#+END_SRC

Wow, that "'helm-selection" really doesn't want to be matched...

This might do it...

#+BEGIN_SRC elisp
(string-match "\\(\\B\\|\\W\\)face" "(face-remap-set-base 'helm-selection")
#+END_SRC

Seems to work... now for the real test...

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (token "selection"))
    (string-match (concat "\\(\\B\\|\\W\\)" token "\\(\\W\\|\\B\\)") target))
#+END_SRC

I think it works!  Let's try it for real...

Buuuuut it doesn't match "selection".  Wow.

#+BEGIN_SRC elisp
  (let ((target "(face-remap-set-base 'helm-selection")
        (tokens '("face" "helm" "blah" "selection" "base")))
    (cl-loop for token in tokens
             when (string-match (concat "\\(\\B\\|\\W\\|\\_<\\|[[:punct:]]\\)" token "\\(\\B\\|\\W\\|\\_>\\|[[:punct:]]\\)") target)
             collect token))
#+END_SRC

Ok, this seems to match for "face", "helm", and "selection" and "base" but not "blah".

Okay, this seems to work:

#+BEGIN_SRC elisp
(defcustom helm-org-rifle-re-begin-part
  "\\(\\B\\|\\W\\|\\_<\\|[[:punct:]]\\)"
  "Argh"
  :group 'helm-org-rifle :type 'regexp)

(defcustom helm-org-rifle-re-end-part
  "\\(\\B\\|\\W\\|\\_>\\|[[:punct:]]\\)"
  "argh"
  :group 'helm-org-rifle :type 'regexp)

;; Then do:
(concat helm-org-rifle-re-begin-part token helm-org-rifle-re-end-part)
#+END_SRC

But it feels like it's matching slower now, so I guess I need to experiment with different ones...

#+NAME: symtest
#+BEGIN_SRC elisp :exports code
  (let ((target "(face-remap-set-base 'helm-selection")
        (tokens '("face" "helm" "blah" "selection" "base")))
    (cl-loop for token in tokens
             when (string-match (concat helm-org-rifle-re-begin-part token helm-org-rifle-re-end-part) target)
             collect token))
#+END_SRC

Let's try a simpler one:

#+BEGIN_SRC elisp :results none
(setq helm-org-rifle-re-begin-part
  "\\(\\B\\|\\_<\\|[[:punct:]]\\)")

(setq helm-org-rifle-re-end-part
  "\\(\\B\\|\\_>\\|[[:punct:]]\\)")
#+END_SRC

#+CALL: symtest[]()

#+RESULTS:
| face | helm | selection | base |

Ok, that works.  Now for another:

#+BEGIN_SRC elisp :results none
(setq helm-org-rifle-re-begin-part
  "\\(\\_<\\|[[:punct:]]\\)")

(setq helm-org-rifle-re-end-part
  "\\(\\_>\\|[[:punct:]]\\)")
#+END_SRC

#+CALL: symtest[]()

#+RESULTS:
| face | helm | selection | base |

Ok, that seems to work too.  Kind of makes sense: symbol boundaries or punctuation (which apparently doesn't count as a symbol-boundary...for some values of syntax table...)

Ok, this seems to work and seems to be decently fast.  Let's commit it and try it out for a while.

*** Target heading

Searching for just the first word should find this, but it doesn't; only searching for =face-remap-set-base= does.

#+BEGIN_SRC elisp
  :after-init-hook (lambda ()
                     (with-current-buffer helm-buffer
                       (face-remap-set-base 'helm-selection
                                            :underline 'unspecified
                                            :weight 'unspecified
                                            :background (face-attribute 'helm-selection :background))))
#+END_SRC

** TODO Substring matching

Does searching for "solution" match this subheading?

#+BEGIN_SRC elisp
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "test.org") "solution")
#+END_SRC

...No, it does not.  That will probably need to be an option, customizable and/or with a prefix arg.

*** Test entry

Solutions

** DONE Order-sensitive matching

We want order to be irrelevant.  So searching for "bravo alpha" should match the following subheading...

And it does.  Except...

#+BEGIN_SRC elisp
;; This works
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "~/org/inbox.org") "emacs org-mode")

;; This works
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "~/org/inbox.org") "org-mode emac")

;; This gives a weird args-out-of-range error.  Does it only happen in this large file?
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "~/org/inbox.org") "org-mode emacs")
(helm-org-rifle-get-candidates-in-buffer (get-file-buffer "~/org/reference.org") "org-mode emacs")

;; No, it happens in the smaller file too...are hyphens the problem?...yes...
#+END_SRC



*** Test entry

alpha bravo

** DONE Hyphenated words cause order-sensitive matching?

#+BEGIN_SRC elisp
;; This works fine
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "alpha charlie-delta")

;; So does this
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "charlie-delta")

;; And this
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "charlie-delta alpha")

;; But this does not!
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "org-mode alpha")

;; But this works!
(helm-org-rifle-get-candidates-in-buffer (current-buffer) "org-mode blah")
#+END_SRC

The problem seems to be when the hyphenated word is on a different line than the non-hyphenated word (and we're only dealing with two words here...).  I sure don't know why.  Will have to step through the matching code...

*** ivy-regex-ignore-order

The =ivy-regex-ignore-order= setting in [[http://oremacs.com/swiper/#completion-styles][ivy/swiper]] might help with figuring this out.

*** Test entry

alpha bravo charlie-delta
argh org-mode blah

** DONE Priority

Headings with priorities should be correctly displayed in results.

*** [#B] Priority target heading

Baby elephant

** MAYBE Match only headings

It might be nice to only match against headings, but this is not as easy as it might seem.  This whole package is made to search both headings and content.

** TODO Match and show tags

This should show both this heading and the target:

#+BEGIN_SRC elisp :results value
(let ((helm-org-rifle-show-tags t))
        (helm-org-rifle-get-candidates-in-buffer (current-buffer) "charade"))
#+END_SRC

#+RESULTS:
| *** Target heading for tags test :charade:                                                            | 34684 |
| ** TODO Match and show tags buffer (current-buffer) "charade"))...buffer (current-buffer) "charade")) | 34242 |

This should show only this heading:

#+BEGIN_SRC elisp :results value
  (let ((helm-org-rifle-show-tags nil))
        (helm-org-rifle-get-candidates-in-buffer (current-buffer) "charade"))
#+END_SRC

#+RESULTS:
| ** TODO Match and show tags buffer (current-buffer) "charade"))...t heading for tags test :charade: ...buffer (current-buffer) "charade"))...buffer (current-buf...buffer (current-buffer) "charade")) | 34242 |

*** Target heading for tags test :charade: 

Yarr.

*** Target heading 2

This should also match for the content: :charade: 

*** Fontify tags correctly

Tags are being fontified just like the rest of the heading text, instead of like tags.

#+BEGIN_SRC elisp
  (helm-org-rifle-fontify-like-in-org-mode (s-join " " (list "*"
                                                             "Heading"
                                                             ":tag1:tag2:")))
#+END_SRC

#+RESULTS:
:  * Heading :tag1:tag2:

Seems like there needs to be whitespace after the tag string to make it appear in the =org-tag= face.

#+BEGIN_SRC elisp
  (helm-org-rifle-fontify-like-in-org-mode (s-join " " (list "*"
                                                             "Heading"
                                                             ":tag1:tag2: ")))
#+END_SRC

#+RESULTS:
: * Heading :tag1:tag2:

*** Match with colons

Surrounding tags with colons in the input doesn't seem to work:

#+BEGIN_SRC elisp :results value
(let ((helm-org-rifle-show-tags t))
        (helm-org-rifle-get-candidates-in-buffer (current-buffer) ":charade:"))
#+END_SRC

#+RESULTS:

It's because the colons in the tag string are being matched by the =:punct:= in the regexp's first part, eating the colon so it doesn't match the one in the input string.  I'm not sure how to fix that.  I guess I could make the matching regexp a series of =prefix-input-suffix= groups, and adjust the prefix and suffix for inputs that should match tags...seems messy but I guess it would work.

#+BEGIN_SRC txt
\(\_<\|[[:punct:]]\)\( \)\(\_>\|[[:punct:]]\)

"(_<|[[:punct:]])(:tag1:)(_>|[[:punct:]])"
#+END_SRC

#+BEGIN_SRC elisp
(string-match "^:[[:word:]@:]+:$" ":charade:tag2:")
(string-match "a" "ba")
#+END_SRC

#+BEGIN_SRC elisp
  (let* ((input (split-string input " " t))
         ;; Double colons in tag strings in input so they can match
         (input (mapcar (lambda (s)
                          (if (string-match helm-org-rifle-tags-re s)
                              (replace-regexp-in-string ":" "::" s)
                            s))
                        input))
         (match-all-tokens-re (mapconcat (lambda (token)
                                           (if (string-match helm-org-rifle-tags-re token)
                                               ;; Remove punct class from prefix and suffix so it can match tag strings
                                               (concat "\\_<" (regexp-quote token) "\\_>")
                                             ;; Not a tag; use normal prefix/suffix
                                             (concat helm-org-rifle-re-begin-part
                                                     (regexp-quote token)
                                                     helm-org-rifle-re-end-part)))))
         ;; TODO: Turn off case folding if input contains mixed case
         (case-fold-search t)
         results))
#+END_SRC

*** Match headings with multiple tags

Now it matches headings with one tag, but not more than one.

#+BEGIN_SRC elisp :results value
(let ((helm-org-rifle-show-tags t))
        (helm-org-rifle-get-candidates-in-buffer (current-buffer) ":gunn:"))
#+END_SRC

Maybe this will help, from =org.el=

#+BEGIN_SRC elisp
(org-re "\\(?:[ \t]+\\(:[[:alnum:]_@#%%:]+:\\)\\)?")
#+END_SRC

#+BEGIN_SRC elisp
  (let ((helm-org-rifle-show-tags t)
        (helm-org-rifle-tags-re (org-re "\\(?:[ \t]+\\(:[[:alnum:]_@#%%:]+:\\)\\)?")))
    (helm-org-rifle-get-candidates-in-buffer (current-buffer) ":gunn:"))  
#+END_SRC

#+RESULTS:
| ****   Target heading with multiple tags :gunn:moon: \n                                                            | 38717 |
| ***   Match headings with multiple tags  \nbuffer (current-buffer) ":gunn:"))...buffer (current-buffer) ":gunn:")) | 38106 |

Yeah, using that regexp from =org-complex-heading-regexp-format= in =org.el= seems to work.  Whew.

**** Target heading with multiple tags :gunn:moon: 

